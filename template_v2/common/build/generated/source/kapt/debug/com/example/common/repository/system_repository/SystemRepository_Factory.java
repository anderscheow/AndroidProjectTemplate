// Generated by Dagger (https://dagger.dev).
package com.example.common.repository.system_repository;

import com.example.common.repository.system_repository.local.SystemLocalDataSource;
import com.example.common.repository.system_repository.remote.SystemRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SystemRepository_Factory implements Factory<SystemRepository> {
  private final Provider<SystemRemoteDataSource> systemRemoteDataSourceProvider;

  private final Provider<SystemLocalDataSource> systemLocalDataSourceProvider;

  public SystemRepository_Factory(Provider<SystemRemoteDataSource> systemRemoteDataSourceProvider,
      Provider<SystemLocalDataSource> systemLocalDataSourceProvider) {
    this.systemRemoteDataSourceProvider = systemRemoteDataSourceProvider;
    this.systemLocalDataSourceProvider = systemLocalDataSourceProvider;
  }

  @Override
  public SystemRepository get() {
    return newInstance(systemRemoteDataSourceProvider.get(), systemLocalDataSourceProvider.get());
  }

  public static SystemRepository_Factory create(
      Provider<SystemRemoteDataSource> systemRemoteDataSourceProvider,
      Provider<SystemLocalDataSource> systemLocalDataSourceProvider) {
    return new SystemRepository_Factory(systemRemoteDataSourceProvider, systemLocalDataSourceProvider);
  }

  public static SystemRepository newInstance(SystemRemoteDataSource systemRemoteDataSource,
      SystemLocalDataSource systemLocalDataSource) {
    return new SystemRepository(systemRemoteDataSource, systemLocalDataSource);
  }
}
