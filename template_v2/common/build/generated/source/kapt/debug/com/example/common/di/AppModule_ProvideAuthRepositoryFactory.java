// Generated by Dagger (https://dagger.dev).
package com.example.common.di;

import com.example.common.repository.auth_repository.AuthRepository;
import com.example.common.repository.auth_repository.IAuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAuthRepositoryFactory implements Factory<IAuthRepository> {
  private final AppModule module;

  private final Provider<AuthRepository> repositoryProvider;

  public AppModule_ProvideAuthRepositoryFactory(AppModule module,
      Provider<AuthRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public IAuthRepository get() {
    return provideAuthRepository(module, repositoryProvider.get());
  }

  public static AppModule_ProvideAuthRepositoryFactory create(AppModule module,
      Provider<AuthRepository> repositoryProvider) {
    return new AppModule_ProvideAuthRepositoryFactory(module, repositoryProvider);
  }

  public static IAuthRepository provideAuthRepository(AppModule instance,
      AuthRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthRepository(repository));
  }
}
