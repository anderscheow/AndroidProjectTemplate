// Generated by Dagger (https://dagger.dev).
package com.example.common.di;

import com.example.common.repository.auth_repository.remote.AuthApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAuthApiFactory implements Factory<AuthApi> {
  private final AppModule module;

  private final Provider<Retrofit> retrofitProvider;

  public AppModule_ProvideAuthApiFactory(AppModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public AuthApi get() {
    return provideAuthApi(module, retrofitProvider.get());
  }

  public static AppModule_ProvideAuthApiFactory create(AppModule module,
      Provider<Retrofit> retrofitProvider) {
    return new AppModule_ProvideAuthApiFactory(module, retrofitProvider);
  }

  public static AuthApi provideAuthApi(AppModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthApi(retrofit));
  }
}
