// Generated by Dagger (https://dagger.dev).
package com.example.common.repository.auth_repository;

import com.example.common.repository.auth_repository.local.AuthLocalDataSource;
import com.example.common.repository.auth_repository.remote.AuthRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthRepository_Factory implements Factory<AuthRepository> {
  private final Provider<AuthRemoteDataSource> authRemoteDataSourceProvider;

  private final Provider<AuthLocalDataSource> authLocalDataSourceProvider;

  public AuthRepository_Factory(Provider<AuthRemoteDataSource> authRemoteDataSourceProvider,
      Provider<AuthLocalDataSource> authLocalDataSourceProvider) {
    this.authRemoteDataSourceProvider = authRemoteDataSourceProvider;
    this.authLocalDataSourceProvider = authLocalDataSourceProvider;
  }

  @Override
  public AuthRepository get() {
    return newInstance(authRemoteDataSourceProvider.get(), authLocalDataSourceProvider.get());
  }

  public static AuthRepository_Factory create(
      Provider<AuthRemoteDataSource> authRemoteDataSourceProvider,
      Provider<AuthLocalDataSource> authLocalDataSourceProvider) {
    return new AuthRepository_Factory(authRemoteDataSourceProvider, authLocalDataSourceProvider);
  }

  public static AuthRepository newInstance(AuthRemoteDataSource authRemoteDataSource,
      AuthLocalDataSource authLocalDataSource) {
    return new AuthRepository(authRemoteDataSource, authLocalDataSource);
  }
}
